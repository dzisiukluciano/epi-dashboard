<?xml version="1.0" encoding="utf-8"?>
<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	minWidth="600" minHeight="600"
	width="100%" height="100%"
	backgroundColor="#ffffff"
	skinClass="skins.CustomApplicationSkin"
	xmlns:autoServices="autoServices.*"
	applicationComplete="onApplicationComplete()" >
	
	<fx:Declarations>			
		<s:CallResponder id="findAllTabsResult"/>
		<autoServices:TabService id="tabService" 
			fault="faultHandler(event.fault)" showBusyCursor="true"
			result="findAllTabsResultHandler(event.result)" />
	</fx:Declarations>
		
	
	<fx:Script>
		<![CDATA[
			import autoServices.TabService;
			
			import autoValueObjects.Pod;
			import autoValueObjects.Tab;
			
			import com.esria.samples.dashboard.events.LayoutChangeEvent;
			import com.esria.samples.dashboard.managers.PodLayoutManager;
			import com.esria.samples.dashboard.managers.StateManager;
			import com.esria.samples.dashboard.view.ChartContent;
			import com.esria.samples.dashboard.view.PieChartContent;
			import com.esria.samples.dashboard.view.PodContentBase;
			import com.esria.samples.dashboard.view.PodPanel;
			
			import components.editTab;
			
			import flash.sampler.NewObjectSample;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.Fault;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.components.NavigatorContent;
			import spark.events.IndexChangeEvent;
			
			import vo.TabContainer;
			
			// Array of PodLayoutManagers
			private var podLayoutManagers:Array = new Array();
			
			// Stores the xml data keyed off of a PodLayoutManager.
			private var podDataDictionary:Dictionary = new Dictionary();
			
			// Stores PodLayoutManagers keyed off of a Pod.
			// Used for podLayoutManager calls after pods have been created for the first time.
			// Also, used for look-ups when saving pod content ViewStack changes.
			private var podHash:Object = new Object();
			
			//Permisos
			private var permisoAddTabs:Boolean = true;
			
			private function onApplicationComplete():void
			{
				//cargo la configuracion
				findAllTabsResult.token = tabService.findAllTabs();
			}
			
			private function faultHandler(e:Fault):void{
				Alert.show(e.faultString + '\n' + e.faultDetail);
			}
			
			private function findAllTabsResultHandler(result:*):void{
				var tabs:ArrayCollection = result as ArrayCollection;
				for each (var t:Tab in tabs){
					
					var tab:TabContainer = new TabContainer();
					tab.label = t.name;
					tab.percentWidth = 100;
					tab.percentHeight = 100;
					tab.id = t.id.toString();
					viewStack.addChild(tab);
					
					// Create a manager for each view.
					var manager:PodLayoutManager = new PodLayoutManager();
					manager.container = tab;
					manager.id = tab.id;
					manager.addEventListener(LayoutChangeEvent.UPDATE, StateManager.setPodLayout);
					// Store the pod xml data. Used when view is first made visible.
					podDataDictionary[manager] = t.pods;
					podLayoutManagers.push(manager);
				}
				
				if(permisoAddTabs){
					agregarPestaniaNewTab()
				}
				
				var index:Number = StateManager.getViewIndex();
				// Make sure the index is not out of range.
				// This can happen if a tab view was saved but then tabs were subsequently removed from the XML.
				index = Math.min(tabBar.numChildren - 1, index);
				onItemClickTabBar(new IndexChangeEvent(IndexChangeEvent.CHANGE, false, false, -1, index));
				tabBar.selectedIndex = index;		
				
			}
			
			private function onItemClickTabBar(e:IndexChangeEvent):void
			{
				var index:Number = e.newIndex;
				StateManager.setViewIndex(index); // Save the view index.
				
				viewStack.selectedIndex = index;
				
				// If data exists then add the pods. After the pods have been added the data is cleared.
				var podLayoutManager:PodLayoutManager = podLayoutManagers[index];
				if (podDataDictionary[podLayoutManager] != null)
					addPods(podLayoutManager);
			}
			
			// Adds the pods to a view.
			private function addPods(manager:PodLayoutManager):void
			{
				// Loop through the pod nodes for each view node.
				var pods:ArrayCollection = podDataDictionary[manager];
				var podLen:int = pods.length;
				var unsavedPodCount:Number = 0;
				for each (var pod:Pod in pods)
				{
					// Figure out which type of pod content to use.
					var podContent:PodContentBase = null;
					if (pod.type.name == "chart")
						podContent = new ChartContent();
					else if (pod.type.name == "pieChart")
						podContent = new PieChartContent();
					
					if (podContent != null)
					{
						var viewId:String = manager.id;
						var podId:String = pod.id.toString();
						podContent.pod = pod;
						
						// Get the saved value for the pod content viewStack.
						if (StateManager.getPodViewIndex(viewId, podId) != -1)
							pod.selectedViewIndex = StateManager.getPodViewIndex(viewId, podId);
						
						var podPanel:PodPanel = new PodPanel();
						podPanel.id = podId;
						podPanel.title = pod.title;
						podPanel.addElement(podContent);
						var index:Number;
						
						if (StateManager.isPodMinimized(viewId, podId))
						{
							index = StateManager.getMinimizedPodIndex(viewId, podId);
							manager.addMinimizedItemAt(podPanel, index);
						}
						else
						{
							index = StateManager.getPodIndex(viewId, podId);
							
							// If the index hasn't been saved move the pod to the last position.
							if (index == -1)
							{
								index = podLen + unsavedPodCount;
								unsavedPodCount += 1;
							}
							
							manager.addItemAt(podPanel, index, StateManager.isPodMaximized(viewId, podId));
						}
						
						pod.addEventListener(IndexChangedEvent.CHANGE, onChangePodView);
						
						podHash[podPanel] = manager;
					}
				}
				
				// Delete the saved data.
				delete podDataDictionary[manager];
				
				// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
				if(podPanel!=null)
					podPanel.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
			}
			
			// Pod has been created so update the respective PodLayoutManager.
			private function onCreationCompletePod(e:FlexEvent):void
			{
				e.currentTarget.removeEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				var manager:PodLayoutManager = PodLayoutManager(podHash[e.currentTarget]);
				manager.removeNullItems();
				manager.updateLayout(false);
			}
			
			// Saves the pod content ViewStack state.
			private function onChangePodView(e:IndexChangedEvent):void
			{
				var pod:PodPanel = PodPanel(e.currentTarget);
				var viewId:String = PodLayoutManager(podHash[pod]).id;
				StateManager.setPodViewIndex(viewId, pod.id, e.newIndex);
			}
			
			
			
			private function getCurrentTab():TabContainer{
				var index:Number = StateManager.getViewIndex();
				index = Math.min(tabBar.numChildren - 1, index);
				return viewStack.getChildAt(index) as TabContainer;
			}
						
			private function configTab():void{
				var tab:NavigatorContent = getCurrentTab();
				
				var popUp:editTab = editTab(PopUpManager.createPopUp(btnConfig, editTab,true));
				popUp.addEventListener("saveTab",onSaveTab);
				popUp.addEventListener("deleteTab",onDeleteTab);
				popUp.txtTabName.text = tab.label;
				PopUpManager.centerPopUp(popUp);
				popUp.x = popUp.x - popUp.width;
			}
			
			private function onSaveTab(e:Event):void{
				var tab:TabContainer = getCurrentTab();
				
				//para que no se cebe agregando tabs
				if((tabBar.width < 0.8* FlexGlobals.topLevelApplication.width) && tab.newTab)
					agregarPestaniaNewTab();
				
				var edit:IFlexDisplayObject = e.target as IFlexDisplayObject;
				tab.label = editTab(edit).txtTabName.text;
				tab.icon = null;
				
				//random string para salir del paso
				var a:String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
				var alphabet:Array = a.split("");
				var randomLetter:String = "";
				for (var i:Number = 0; i < 10; i++){
					randomLetter += alphabet[Math.floor(Math.random() * alphabet.length)];
				}	
				
				//luego va a ser el id posta del objeto Tab
				for each(var manager:PodLayoutManager in podLayoutManagers){
					if(manager.id == tab.id){
						manager.id = randomLetter;
					}
				}
				tab.id = randomLetter;
				tab.newTab = false;
				
				
				PopUpManager.removePopUp(edit);
			}
			
			private function onDeleteTab(e:Event):void{
				var tab:TabContainer = getCurrentTab();
				if(!tab.newTab){
					viewStack.removeChild(tab);
					var managers:Array = new Array();
					for each(var manager:PodLayoutManager in podLayoutManagers){
						if(manager.id != tab.id){
							managers.push(manager);
						}
					}
					podLayoutManagers = managers;
					PopUpManager.removePopUp(e.target as IFlexDisplayObject);
				}
			}
			
			private function agregarPestaniaNewTab():void{
				// ****** Creo la pestaÃ±a "New Tab" *************
				var tab:TabContainer = new TabContainer();
				tab.newTab = true;
				tab.label = "New Tab";
				tab.id = "newtabId";
				tab.percentWidth = 100;
				tab.percentHeight = 100;
				viewStack.addChild(tab);
				
				var managr:PodLayoutManager = new PodLayoutManager();
				managr.container = tab;
				managr.id = "newTabId";
				managr.addEventListener(LayoutChangeEvent.UPDATE, StateManager.setPodLayout);
				// Store the pod data. Used when view is first made visible.
				podDataDictionary[managr] = new XMLList();
				podLayoutManagers.push(managr);
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="left" paddingLeft="45" paddingRight="45" paddingBottom="35" paddingTop="34"/>
	</s:layout>	

	<mx:HBox width="100%">
		<s:TabBar
			id="tabBar"
			change="onItemClickTabBar(event)"
			skinClass="skins.CustomTabBarSkin"
			height="35" 
			dataProvider="{viewStack}" />	
		<mx:Spacer width="100%"/>
		<mx:LinkButton id="btnConfig" icon="@Embed(source='assets/config.png')" click="configTab()" toolTip="Configure current tab"/>
	</mx:HBox>
	<mx:ViewStack
		id="viewStack"
		paddingTop="15"
		width="100%" height="100%" />
</s:Application>
