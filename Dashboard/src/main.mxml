<?xml version="1.0" encoding="utf-8"?>
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalAlign="left"
	minWidth="600" minHeight="600"
	width="100%" height="100%"
	backgroundSize="100%"
	backgroundColor="#ffffff"
	paddingLeft="45" paddingRight="45" paddingBottom="35" paddingTop="34"
	applicationComplete="onApplicationComplete()">
	
	<mx:Style source="/assets/styles.css" />
	
		
	<mx:RemoteObject id="tabService" source="tabRo" showBusyCursor="true">
		<mx:method name="findAllTabs" result="findAllTabsResultHandler(event.result)" fault="faultHandler(event.fault)"/>
	</mx:RemoteObject>
		
	
	<mx:Script>
		<![CDATA[
			import com.esria.samples.dashboard.events.LayoutChangeEvent;
			import com.esria.samples.dashboard.managers.PodLayoutManager;
			import com.esria.samples.dashboard.managers.StateManager;
			import com.esria.samples.dashboard.view.ChartContent;
			import com.esria.samples.dashboard.view.FormContent;
			import com.esria.samples.dashboard.view.ListContent;
			import com.esria.samples.dashboard.view.PieChartContent;
			import com.esria.samples.dashboard.view.Pod;
			import com.esria.samples.dashboard.view.PodContentBase;
			
			import components.editTab;
			
			import flash.sampler.NewObjectSample;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.Fault;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import vo.Tab;
			
			[Embed(source='assets/plus.png')]
			private static var plusIcon:Class;
			
			// Array of PodLayoutManagers
			private var podLayoutManagers:Array = new Array();
			
			// Stores the xml data keyed off of a PodLayoutManager.
			private var podDataDictionary:Dictionary = new Dictionary();
			
			// Stores PodLayoutManagers keyed off of a Pod.
			// Used for podLayoutManager calls after pods have been created for the first time.
			// Also, used for look-ups when saving pod content ViewStack changes.
			private var podHash:Object = new Object();
			
			//Permisos
			private var permisoAddTabs:Boolean = true;
			
			private function onApplicationComplete():void
			{
				//cargo la configuracion
				tabService.findAllTabs;
			}
			
			private function findAllTabsResultHandler(e:*):void{
				var tabs:ArrayCollection = e as ArrayCollection;
				
			}
			
			private function faultHandler(e:Fault):void{
				Alert.show(e.message);
			}
			
			private function onResultHttpService(e:ResultEvent):void
			{
				var viewXMLList:XMLList = e.result.view;
				var len:Number = viewXMLList.length();
				var containerWindowManagerHash:Object = new Object();
				for (var i:Number = 0; i < len; i++) // Loop through the view nodes.
				{
					// Create a canvas for each view node.
					var tab:Tab = new Tab();
					// PodLayoutManager handles resize and should prevent the need for
					// scroll bars so turn them off so they aren't visible during resizes.
					tab.horizontalScrollPolicy = "off";
					tab.verticalScrollPolicy = "off";
					tab.label = viewXMLList[i].@label;
					tab.percentWidth = 100;
					tab.percentHeight = 100;
					//luego va a ser el id posta del objeto Tab
					tab.id = viewXMLList[i].@id;
					viewStack.addChild(tab);
					
					// Create a manager for each view.
					var manager:PodLayoutManager = new PodLayoutManager();
					manager.container = tab;
					//luego va a ser el id posta del objeto Tab
					manager.id = tab.id;
					manager.addEventListener(LayoutChangeEvent.UPDATE, StateManager.setPodLayout);
					// Store the pod xml data. Used when view is first made visible.
					podDataDictionary[manager] = viewXMLList[i].pod;
					podLayoutManagers.push(manager);
				}
				
				if(permisoAddTabs){
					agregarPestaniaNewTab()
				}
				
				var index:Number = StateManager.getViewIndex();
				// Make sure the index is not out of range.
				// This can happen if a tab view was saved but then tabs were subsequently removed from the XML.
				index = Math.min(tabBar.numChildren - 1, index);
				onItemClickTabBar(new ItemClickEvent(ItemClickEvent.ITEM_CLICK, false, false, null, index));
				tabBar.selectedIndex = index;
			}
			
			private function onItemClickTabBar(e:ItemClickEvent):void
			{
				var index:Number = e.index;
				StateManager.setViewIndex(index); // Save the view index.
				
				viewStack.selectedIndex = index;
				
				// If data exists then add the pods. After the pods have been added the data is cleared.
				var podLayoutManager:PodLayoutManager = podLayoutManagers[index];
				if (podDataDictionary[podLayoutManager] != null)
					addPods(podLayoutManagers[index]);
			}
			
			// Adds the pods to a view.
			private function addPods(manager:PodLayoutManager):void
			{
				// Loop through the pod nodes for each view node.
				var podXMLList:XMLList = podDataDictionary[manager];
				var podLen:Number = podXMLList.length();
				var unsavedPodCount:Number = 0;
				for (var j:Number = 0; j < podLen; j++)
				{
					// Figure out which type of pod content to use.
					var podContent:PodContentBase = null;
					if (podXMLList[j].@type == "chart")
						podContent = new ChartContent();
					else if (podXMLList[j].@type == "form")
						podContent = new FormContent();
					else if (podXMLList[j].@type == "list")
						podContent = new ListContent();
					else if (podXMLList[j].@type == "pieChart")
						podContent = new PieChartContent();
					
					if (podContent != null)
					{
						var viewId:String = manager.id;
						var podId:String = podXMLList[j].@id;
						
						// Get the saved value for the pod content viewStack.
						if (StateManager.getPodViewIndex(viewId, podId) != -1)
							podXMLList[j].@selectedViewIndex = StateManager.getPodViewIndex(viewId, podId);
						
						podContent.properties = podXMLList[j];
						var pod:Pod = new Pod();
						pod.id = podId;
						pod.title = podXMLList[j].@title;
						pod.addChild(podContent);
						var index:Number;
						
						if (StateManager.isPodMinimized(viewId, podId))
						{
							index = StateManager.getMinimizedPodIndex(viewId, podId);
							manager.addMinimizedItemAt(pod, index);
						}
						else
						{
							index = StateManager.getPodIndex(viewId, podId);
							
							// If the index hasn't been saved move the pod to the last position.
							if (index == -1)
							{
								index = podLen + unsavedPodCount;
								unsavedPodCount += 1;
							}
							
							manager.addItemAt(pod, index, StateManager.isPodMaximized(viewId, podId));
						}
						
						pod.addEventListener(IndexChangedEvent.CHANGE, onChangePodView);
						
						podHash[pod] = manager;
					}
				}
				
				// Delete the saved data.
				delete podDataDictionary[manager];
				
				// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
				if(pod!=null)
					pod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
			}
			
			// Pod has been created so update the respective PodLayoutManager.
			private function onCreationCompletePod(e:FlexEvent):void
			{
				e.currentTarget.removeEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				var manager:PodLayoutManager = PodLayoutManager(podHash[e.currentTarget]);
				manager.removeNullItems();
				manager.updateLayout(false);
			}
			
			// Saves the pod content ViewStack state.
			private function onChangePodView(e:IndexChangedEvent):void
			{
				var pod:Pod = Pod(e.currentTarget);
				var viewId:String = PodLayoutManager(podHash[pod]).id;
				StateManager.setPodViewIndex(viewId, pod.id, e.newIndex);
			}
			
			
			
			private function getCurrentTab():Tab{
				var index:Number = StateManager.getViewIndex();
				index = Math.min(tabBar.numChildren - 1, index);
				return viewStack.getChildAt(index) as Tab;
			}
						
			private function configTab():void{
				var tab:Canvas = getCurrentTab();
				
				var popUp:editTab = editTab(PopUpManager.createPopUp(btnConfig, editTab,true));
				popUp.addEventListener("saveTab",onSaveTab);
				popUp.addEventListener("deleteTab",onDeleteTab);
				popUp.txtTabName.text = tab.label;
				PopUpManager.centerPopUp(popUp);
				popUp.x = popUp.x - popUp.width;
			}
			
			private function onSaveTab(e:Event):void{
				var tab:Tab = getCurrentTab();
				
				//para que no se cebe agregando tabs
				if((tabBar.width < 0.8*Application.application.width) && tab.newTab)
					agregarPestaniaNewTab();
				
				var edit:IFlexDisplayObject = e.target as IFlexDisplayObject;
				tab.label = editTab(edit).txtTabName.text;
				tab.icon = null;
				
				//random string para salir del paso
				var a:String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
				var alphabet:Array = a.split("");
				var randomLetter:String = "";
				for (var i:Number = 0; i < 10; i++){
					randomLetter += alphabet[Math.floor(Math.random() * alphabet.length)];
				}	
				
				//luego va a ser el id posta del objeto Tab
				for each(var manager:PodLayoutManager in podLayoutManagers){
					if(manager.id == tab.id){
						manager.id = randomLetter;
					}
				}
				tab.id = randomLetter;
				tab.newTab = false;
				
				
				PopUpManager.removePopUp(edit);
			}
			
			private function onDeleteTab(e:Event):void{
				var tab:Tab = getCurrentTab();
				if(!tab.newTab){
					viewStack.removeChild(tab);
					var managers:Array = new Array();
					for each(var manager:PodLayoutManager in podLayoutManagers){
						if(manager.id != tab.id){
							managers.push(manager);
						}
					}
					podLayoutManagers = managers;
					PopUpManager.removePopUp(e.target as IFlexDisplayObject);
				}
			}
			
			private function agregarPestaniaNewTab():void{
				// ****** Creo la pestaña "New Tab" *************
				var tab:Tab = new Tab();
				tab.newTab = true;
				tab.horizontalScrollPolicy = "off";
				tab.verticalScrollPolicy = "off";
				tab.label = "New Tab";
				tab.icon = plusIcon;
				tab.id = "newtabId";
				tab.percentWidth = 100;
				tab.percentHeight = 100;
				viewStack.addChild(tab);
				
				var managr:PodLayoutManager = new PodLayoutManager();
				managr.container = tab;
				managr.id = "newTabId";
				managr.addEventListener(LayoutChangeEvent.UPDATE, StateManager.setPodLayout);
				// Store the pod data. Used when view is first made visible.
				podDataDictionary[managr] = new XMLList();
				podLayoutManagers.push(managr);
			}
			
		]]>
	</mx:Script>
	<mx:HBox width="100%">
		<mx:TabBar
			id="tabBar"
			itemClick="onItemClickTabBar(event)"
			height="35" 
			dataProvider="viewStack" />	
		<mx:Spacer width="100%"/>
		<mx:LinkButton id="btnConfig" icon="@Embed(source='assets/config.png')" click="configTab()" toolTip="Configure current tab"/>
	</mx:HBox>
	<mx:ViewStack
		id="viewStack"
		paddingTop="15"
		width="100%" height="100%" />
</mx:Application>
