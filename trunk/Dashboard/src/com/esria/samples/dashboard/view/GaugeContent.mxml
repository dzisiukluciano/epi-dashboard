<?xml version="1.0" encoding="utf-8"?>

<PodContentBase
	xmlns="com.esria.samples.dashboard.view.*"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="100%" height="100%"
	creationComplete="init()"
	click="onClick(event)"
	mouseDown="onClick(event)"
	mouseUp="onClick(event)"
	xmlns:autoServices="autoServices.*" 
	xmlns:controls="components.gauge.brightPoint.controls.*">
	<fx:Script>
		<![CDATA[
			import autoValueObjects.IndicatorDto;
			import autoValueObjects.PodData;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			
			private var indicator:IndicatorDto;
			
			private function init():void{
				searchIndicatorResult.token = indicatorService.searchIndicator(pod.dataSource, pod.code, pod.valueField, pod.joinTable);
			}

			private function searchIndicatorResultHandler(result:*):void{
				this.indicator = result[0];
				processAlerts();
			}
			
			
			public function processAlerts():void {
								
				var alphas:Array=new Array(6);
				var values:Array = new Array(7);
				var colors:Array = new Array(6);
				
				setScaleTransparenceColors(alphas);
				setScaleValues(values);
				setScaleColors(colors,indicator.indicatorscale.reverse);
				gauge.value=indicator.valor;
				gauge.minimum = values[0];
				gauge.maximum = values[values.length-1];
				gauge.setStyle("alertValues",values);
				gauge.setStyle("alertColors",colors);
				gauge.setStyle("alertAlphas",alphas);
				gauge.setStyle("startAngle", 35);
				gauge.setStyle("endAngle", 325);
			//	gauge.setStyle("backgroundColor", "black");
				gauge.setStyle("showLabel", true);
				
				for (var i:int=0; i<values.length-1; i++) {								
					if (values[i]< gauge.value && gauge.value < values[i+1]){
						gauge.setStyle('indicatorCrownColor', colors[i]);
						gauge.setStyle('indicatorColor',colors[i]);
					}					
				}
				gauge.invalidateDisplayList();
				gauge.value=indicator.valor;				
			}
			
			public function setScaleTransparenceColors(alphas:Array):void{
				alphas[0]=".8";
				alphas[1]=".8";
				alphas[2]=".8";
				alphas[3]=".8";
				alphas[4]=".8";
				alphas[5]=".8";
			} 
			public function setScaleColors(colors:Array , reverse:Boolean):void{
				if(reverse){
					colors[0]=("white");
					colors[1]=("blue");
					colors[2]=("green");
					colors[3]=("0xff9000");
					colors[4]=("yellow");
					colors[5]=("red");
				}else{
					colors[0]=("red");
					colors[1]=("yellow");
					colors[2]=("0xff9000");
					colors[3]=("green");
					colors[4]=("blue");
					colors[5]=("white");
				}
				
			}
			
			public function setScaleValues(values:Array):void{
				
				if( isNaN(indicator.indicatorscale.maximo)){
					values[0]=("0");
					values[1]="10";
					values[2]=("25");
					values[3]=("50");
					values[4]=("65");
					values[5]=("75");
					values[6]=("100");
				}else{
					if(!indicator.indicatorscale.reverse){	
						values[0]=String(indicator.indicatorscale.minimo);
						values[1]=String(indicator.indicatorscale.posicionminReg);
						values[2]=String(indicator.indicatorscale.regular);
						values[3]=String(indicator.indicatorscale.posicionregBuena);
						values[4]=String(indicator.indicatorscale.bueno);
						values[5]=String(indicator.indicatorscale.posicionbuenaMax);
						values[6]=String(indicator.indicatorscale.maximo);
					}else{
						values[6]=String(indicator.indicatorscale.minimo);
						values[5]=String(indicator.indicatorscale.posicionminReg);
						values[4]=String(indicator.indicatorscale.regular);
						values[3]=String(indicator.indicatorscale.posicionregBuena);
						values[2]=String(indicator.indicatorscale.bueno);
						values[1]=String(indicator.indicatorscale.posicionbuenaMax);
						values[0]=String(indicator.indicatorscale.maximo);
					}
				}
			}
			
			private function onClick(event:Event):void{
				event.stopImmediatePropagation();
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:CallResponder id="searchIndicatorResult"/>
		<autoServices:IndicatorService id="indicatorService" showBusyCursor="true"
									   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
									   result="searchIndicatorResultHandler(event.result)"/>

	</fx:Declarations>
	
	<s:HGroup id="container" width="100%" height="100%">
		<mx:Spacer width="100%"/>
		<controls:DegrafaGauge id="gauge" height="100%" width="{gauge.height}"/>
		<mx:Spacer width="100%"/>
	</s:HGroup>

</PodContentBase>

